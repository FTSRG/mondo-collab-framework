#!/bin/bash

# Post-commit script is responsible for execute the "get" method of our lens when commit occurs on the gold repository.
# This hook has to be placed into the hooks directory of the gold repository.
# For the configuration, set the following variables:

# 1. Clear the temporary Additional Front repository folder
# 2. Clear the temporary Gold repository folder
# 3. Checkout Gold reposiroty to $TEMP_GOLD
# 4. Check that the rule and query files exists in $TEMP_GOLD
#     if not, we don't have to run lens transformation
# 5. Get the changes from the front repository
# 6. Iterate over the front list
# 6.1 Check the trigger repository
#     If this is the specific repository that triggered the execution, we don't have to do anything
# 6.2 Iterate over the changes
# 6.3 Get committer name
# 6.4 Get the commit message
# 6.5 Add all changes in the front repository
# 6.6 Commit the changes to the front repository in the name of admin

set -e # Exit from the script if any subcommand or pipeline returns an error.

# Replace from $2 to $3 in $1
function replace {
    echo "${1/$2/$3}"
}

# Default functions for logging
function timestamp {
  # returns the current time
  date +"%Y-%m-%d_%H-%M-%S"
}

# logger function
function log {
  # append the current time and $1 arg to the log file
  echo "$(timestamp) $1" 1>>$LOG
}

# concate path parts and includes a slash "/" if necessary
function concate_path_parts {
  for part in "$@"
  do
      case "$result" in
      */)
          result=$result$part
          ;;
      *)
          result=$result/$part
          ;;
      esac
  done
  echo $result
}

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Load the configuration files
. $DIR/config.properties
. $CONFIG_DIR/config.properties
. $CONFIG_DIR/front_list.properties

# Setting the parameters
GOLD_REPOS="$1"                                                           # Gold repository
GOLD_REPOS_URL=$(concate_path_parts $URL $GOLD_REPOS)                     # URL of the gold repository
TEMP_GOLD=$(concate_path_parts $TEMP "TEMP_GOLD_POSTCOMMIT" $GOLD_REPOS)  # Gold repository temporary folder
TEMP_FRONTS=$(concate_path_parts $TEMP "TEMP_FRONT" "Additional")         # Temporary folder for all the front reposiroties
TEMP_CURRENT=$(concate_path_parts $TEMP "TEMP_FRONT" "CURRENT")           # Temporary folder of the current "committer" front repository
REV="$2"                                                                  # Revision number
LOG="$LOG_DIR/post-commit.log"                                            # Log file

log "======================================================="
log "Executing Post-commit"

# Check for a lock file
if [ -f $GOLD_LOCK_FILE ]; then
  log "File exists, we have to reject your commit".
  echo echo "MONDO Error: Another commit is under execution. Please wait until it finishes." 1>&2
  exit 1
else
  touch $GOLD_LOCK_FILE
fi

log "Step 1: clear TEMP_FRONTS - $TEMP_FRONTS"
rm -rf $TEMP_FRONTS

log "Step 2: clear tempGold folder - $TEMP_GOLD"
rm -rf "$TEMP_GOLD"

log "Step 3: checkout gold - from $GOLD_REPOS_URL to $TEMP_GOLD"
svn checkout "$GOLD_REPOS_URL" "$TEMP_GOLD" -r $REV --username $ADMIN_USER --password $ADMIN_PWD

log "Step 4: check that the rules and queries files exist"
LENS_CAN_EXECUTE=false;
if [ ! -f "$TEMP_GOLD/$ACCESS_CONTROL_RULES" ]
then
  if [ ! -f "$TEMP_GOLD/$ACCESS_CONTROL_QUERIES"]
  then
    LENS_CAN_EXECUTE=true;
    log "* Both files exist"
  fi
else
  log "* Files don't exist"
fi

log "Step 5: get change list"
changes=$(svnlook changed -t $TXN $CURRENT_FRONT_REPOS)

log "Step 6: iterate over the front list"
for entry in $FRONT_REPOS_NAME_WITH_ROLE; do
  oldIFS=$IFS
  IFS=':'
  set x $entry
  FRONT_REPO="$2" # Front repository, stored in front_list.properties file
  FRONT_USER="$3" # Username for the lens, stored in front_list.properties file
  CURRENT_REPO=$(concate_path_parts $TEMP_FRONTS $FRONT_REPOS) # Temporary folder the current front repository
  CURRENT_REPO_URL=$(concate_path_parts $URL $SVN_PATH_URL $FRONT_REPO) # URL of the current front repository
  TRIGGER_REPO=$(concate_path_parts $TEMP_CURRENT $SVN_PATH_URL $FRONT_REPOS) # Possible trigger repository folder to test
  log "* processing: $FRONT_REPOS in the name of $FRONT_USER"
  # If this is not the current repo
  if [ ! -d  $TRIGGER_REPO]; then
    log "* Note: Another front repo triggered the process - $TRIGGER_REPO not exists"
    log "* checkout the repository - from $CURRENT_REPO_URL to $CURRENT_REPO"
    svn checkout "$CURRENT_REPO_URL" "$CURRENT_REPO" --username $ADMIN_USER --password $ADMIN_PWD --quiet --non-interactive
    # log "* synchronizing the source tree $TEMP_GOLD/ $CURRENT_REPO"
    # log "* rsync -av --exclude='.svn' $TEMP_GOLD/ $CURRENT_REPO"
    # rsync -av --exclude=".svn" $TEMP_GOLD/ $CURRENT_REPO
    IFS="
"
    log "* start iterating over the changes"
    counter=0
    for line in $changes; do
       val=$(($counter % 2))
       if [ $val = 0 ]
       then
           nextType=$line
       fi
       if [ $val = 1 ]
       then
       	nextChange=$line
        log "     -> Change: $nextType $nextChange"
      	if [ $nextType = "A" ] || [ $nextType = "U" ] || [ $nextType = "UU" ]
      	then
      	   case $nextChange in
           		*/)
              log "     -> Action: Create Dir $CURRENT_REPO/$nextChange"
              mkdir -p "$CURRENT_REPO/$nextChange"
              ;;
           		*)
              log "     -> Action: Copy Content $CURRENT_REPO/$nextChange"
              DIR="$CURRENT_REPO/$nextChange"
              BASEDIR=$(dirname "${DIR}")
              if [ ! -d $BASEDIR ]
              then
                mkdir -p $BASEDIR
              fi
              svnlook cat -t $TXN $GOLD_REPOS_URL $nextChange > "$CURRENT_REPO/$nextChange"
              if [[ $nextChange =~ .${MODEL_EXTENSIONS}$ ]]
              then
                if [ $LENS_CAN_EXECUTE = true ]
                then
                  log "     -> Action: Execute lens $CURRENT_REPO/$nextChange"
                  log "Obfuscator $obfuscatorSeed $obfuscatorSalt $obfuscatorPrefix"
                  $LENS_INVOKE_SCRIPT $FRONT_USER $TEMP_GOLD/$nextChange $CURRENT_REPO/$nextChange '-performGet' $TEMP $obfuscatorSalt $obfuscatorSeed $obfuscatorPrefix "$TEMP_GOLD/$ACCESS_CONTROL_RULES" "$TEMP_GOLD/$ACCESS_CONTROL_QUERIES"
                fi
              else
                log "     -> Action: Copy to gold $CURRENT_REPO/$nextChange"
                cp -rf $TEMP_GOLD/$nextChange $CURRENT_REPO/$nextChange
              fi
              ;;
      	   esac
        fi

      	if [ $nextType = "D" ]
      	then
          log "     -> Action: Delete $CURRENT_REPO/$nextChange"
          rm -rf "$CURRENT_REPO/$nextChange"
        fi
       fi
       counter=$((counter+1))
    done
    IFS="$oldIFS"

    log "Step 6.3: get commit message"
    MSG=$(svnlook log )
    log "* commit message is: $MSG"
    log "Step 6.4: get author name"
    AUTHOR=$(svn log -r $REV $GOLD_REPOS | grep -E '\|' | cut -f2 -d'|' | sort | uniq)
    log "* author name is: $AUTHOR"
    log "* step into the current folder - $CURRENT_REPO"
    cd $CURRENT_REPO

    log "Step 6.5 add all modifications to svn"
    svn add --force * --auto-props --parents --depth infinity -q

    log "Step 6.6 store message into a temporary file"
    echo "$MSG" 1>"svn-commit.tmp"

    log "Step 6.7 execute commit"
    svn commit -F svn-commit.tmp --username $ADMIN_USER --password $ADMIN_PWD --quiet --non-interactive
  else
    log "* Skipping this repo: $FRONT_USER is the current committer"
  fi
done

#rm -rf $TEMP_FRONTS/*
#rm -rf $TEMP_GOLD/*

log "Step 12: Remove lock file"
rm $GOLD_LOCK_FILE

log "Post-commit finished successfully"
log "-------------------------------------------------------"
exit 0
