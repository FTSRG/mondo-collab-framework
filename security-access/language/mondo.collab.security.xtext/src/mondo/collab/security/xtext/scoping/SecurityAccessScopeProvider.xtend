/*
 * generated by Xtext
 */
package mondo.collab.security.xtext.scoping

import com.google.common.collect.Lists
import mondo.collab.security.xtext.securityAccess.Binding
import mondo.collab.security.xtext.securityAccess.ObjectBind
import mondo.collab.security.xtext.securityAccess.Policy
import mondo.collab.security.xtext.securityAccess.Rule
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class SecurityAccessScopeProvider extends AbstractDeclarativeScopeProvider {

	def scope_Binding_param(Binding ctx, EReference ref) {
		val rule = ctx.eContainer as Rule
		Scopes::scopeFor(rule.pattern.parameters)
	}
	
	def scope_ObjectBind_object(ObjectBind ctx, EReference ref) {
		val resourceSet = new ResourceSetImpl		
		val policy = ctx.eContainer.eContainer.eContainer as Policy
		val list = Lists.<EObject>newArrayList
		policy.imports.map[x | resourceSet.getResource(URI.createURI(x.importURI), false).allContents].forEach[x | x.forEach[y | list.add(y)]]
		Scopes.scopeFor(list)
	}
}
