/**
 * generated by Xtext
 */
package hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.gson.Gson;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Association;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.PermissionType;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.TargetType;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policyverification.domain.common.GlobalEnums;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policyverification.domain.common.Policy;
import hu.bme.mit.ftsrg.mondo.accesscontrol.policyverification.domain.common.PolicySet;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class PolicyGenerator implements IGenerator {
  private Map<String, Policy> policyMap = new HashMap<String, Policy>();
  
  private List<PolicySet> associationList = null;
  
  private String fileName = null;
  
  private Gson gson = new Gson();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    ArrayList<PolicySet> _arrayList = new ArrayList<PolicySet>();
    this.associationList = _arrayList;
    URI _normalizedURI = EcoreUtil2.getNormalizedURI(resource);
    String _lastSegment = _normalizedURI.lastSegment();
    int extSeparatorIndex = _lastSegment.lastIndexOf(".");
    if ((extSeparatorIndex != (-1))) {
      URI _normalizedURI_1 = EcoreUtil2.getNormalizedURI(resource);
      String _lastSegment_1 = _normalizedURI_1.lastSegment();
      String _substring = _lastSegment_1.substring(0, extSeparatorIndex);
      this.fileName = _substring;
    }
    String _fileName = this.fileName;
    this.fileName = (_fileName + ".json");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy> _filter = Iterators.<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy>filter(_allContents, hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy.class);
    final Procedure1<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy> _function = new Procedure1<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy>() {
      public void apply(final hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy it) {
        Policy tmpPolicy = PolicyGenerator.this.getPolicy(it);
        boolean _notEquals = (!Objects.equal(tmpPolicy, null));
        if (_notEquals) {
          String _name = it.getName();
          PolicyGenerator.this.policyMap.put(_name, tmpPolicy);
        }
      }
    };
    IteratorExtensions.<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy>forEach(_filter, _function);
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<Association> _filter_1 = Iterators.<Association>filter(_allContents_1, Association.class);
    final Procedure1<Association> _function_1 = new Procedure1<Association>() {
      public void apply(final Association it) {
        ArrayList<Policy> tmpPolicies = new ArrayList<Policy>();
        EList<hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy> _policies = it.getPolicies();
        for (final hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy obj : _policies) {
          String _name = obj.getName();
          boolean _containsKey = PolicyGenerator.this.policyMap.containsKey(_name);
          if (_containsKey) {
            String _name_1 = obj.getName();
            Policy _get = PolicyGenerator.this.policyMap.get(_name_1);
            tmpPolicies.add(_get);
          }
        }
        PermissionType _override = it.getOverride();
        String _name_2 = _override.getName();
        GlobalEnums.Permission tmpPermission = GlobalEnums.<GlobalEnums.Permission>searchEnum(GlobalEnums.Permission.class, _name_2);
        PermissionType _defaultPermission = it.getDefaultPermission();
        String _name_3 = _defaultPermission.getName();
        GlobalEnums.Permission tmpDefaultPermission = GlobalEnums.<GlobalEnums.Permission>searchEnum(GlobalEnums.Permission.class, _name_3);
        TargetType _target = it.getTarget();
        String _name_4 = _target.getName();
        GlobalEnums.Target tmpTarget = GlobalEnums.<GlobalEnums.Target>searchEnum(GlobalEnums.Target.class, _name_4);
        PolicySet policySet = null;
        boolean _and = false;
        boolean _and_1 = false;
        boolean _notEquals = (!Objects.equal(tmpTarget, null));
        if (!_notEquals) {
          _and_1 = false;
        } else {
          boolean _notEquals_1 = (!Objects.equal(tmpPermission, null));
          _and_1 = _notEquals_1;
        }
        if (!_and_1) {
          _and = false;
        } else {
          boolean _notEquals_2 = (!Objects.equal(tmpDefaultPermission, null));
          _and = _notEquals_2;
        }
        if (_and) {
          String _target_id = it.getTarget_id();
          PolicySet _policySet = new PolicySet(tmpTarget, _target_id, tmpPolicies, tmpPermission, tmpDefaultPermission);
          policySet = _policySet;
        } else {
          boolean _and_2 = false;
          boolean _notEquals_3 = (!Objects.equal(tmpTarget, null));
          if (!_notEquals_3) {
            _and_2 = false;
          } else {
            boolean _notEquals_4 = (!Objects.equal(tmpPermission, null));
            _and_2 = _notEquals_4;
          }
          if (_and_2) {
            String _target_id_1 = it.getTarget_id();
            PolicySet _policySet_1 = new PolicySet(tmpTarget, _target_id_1, tmpPolicies, tmpPermission);
            policySet = _policySet_1;
          }
        }
        boolean _notEquals_5 = (!Objects.equal(policySet, null));
        if (_notEquals_5) {
          PolicyGenerator.this.associationList.add(policySet);
        }
      }
    };
    IteratorExtensions.<Association>forEach(_filter_1, _function_1);
    String _json = this.gson.toJson(this.associationList);
    fsa.generateFile(this.fileName, _json);
  }
  
  public Policy getPolicy(final hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.policy.Policy it) {
    EClass _eClass = it.eClass();
    String _name = _eClass.getName();
    boolean _equals = Objects.equal(_name, "Policy");
    if (_equals) {
      PermissionType _permission = it.getPermission();
      String _name_1 = _permission.getName();
      GlobalEnums.Permission tmpPermission = GlobalEnums.<GlobalEnums.Permission>searchEnum(GlobalEnums.Permission.class, _name_1);
      String _query = it.getQuery();
      File tmpQueryFile = new File(_query);
      Policy tmpPolicy = null;
      boolean _and = false;
      boolean _and_1 = false;
      boolean _notEquals = (!Objects.equal(tmpPermission, null));
      if (!_notEquals) {
        _and_1 = false;
      } else {
        boolean _exists = tmpQueryFile.exists();
        _and_1 = _exists;
      }
      if (!_and_1) {
        _and = false;
      } else {
        boolean _isDirectory = tmpQueryFile.isDirectory();
        boolean _not = (!_isDirectory);
        _and = _not;
      }
      if (_and) {
        String _name_2 = it.getName();
        String _pattern = it.getPattern();
        Policy _policy = new Policy(_name_2, tmpPermission, tmpQueryFile, _pattern);
        tmpPolicy = _policy;
        return tmpPolicy;
      }
    }
    return null;
  }
}
