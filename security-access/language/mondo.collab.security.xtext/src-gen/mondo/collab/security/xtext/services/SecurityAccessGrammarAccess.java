/*
 * generated by Xtext
 */
package mondo.collab.security.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SecurityAccessGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AccessControlModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessControlModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesRoleParserRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Assignment cPolicyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPolicyPolicyParserRuleCall_1_0 = (RuleCall)cPolicyAssignment_1.eContents().get(0);
		
		//AccessControlModel:
		//	roles+=Role* policy=Policy;
		@Override public ParserRule getRule() { return rule; }

		//roles+=Role* policy=Policy
		public Group getGroup() { return cGroup; }

		//roles+=Role*
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_0_0() { return cRolesRoleParserRuleCall_0_0; }

		//policy=Policy
		public Assignment getPolicyAssignment_1() { return cPolicyAssignment_1; }

		//Policy
		public RuleCall getPolicyPolicyParserRuleCall_1_0() { return cPolicyPolicyParserRuleCall_1_0; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Role:
		//	User | Group;
		@Override public ParserRule getRule() { return rule; }

		//User | Group
		public Alternatives getAlternatives() { return cAlternatives; }

		//User
		public RuleCall getUserParserRuleCall_0() { return cUserParserRuleCall_0; }

		//Group
		public RuleCall getGroupParserRuleCall_1() { return cGroupParserRuleCall_1; }
	}

	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//User:
		//	"user" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"user" name=ID
		public Group getGroup() { return cGroup; }

		//"user"
		public Keyword getUserKeyword_0() { return cUserKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUsersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cUsersUserCrossReference_3_0 = (CrossReference)cUsersAssignment_3.eContents().get(0);
		private final RuleCall cUsersUserIDTerminalRuleCall_3_0_1 = (RuleCall)cUsersUserCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Group:
		//	"group" name=ID "{" users+=[User]* "}";
		@Override public ParserRule getRule() { return rule; }

		//"group" name=ID "{" users+=[User]* "}"
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//users+=[User]*
		public Assignment getUsersAssignment_3() { return cUsersAssignment_3; }

		//[User]
		public CrossReference getUsersUserCrossReference_3_0() { return cUsersUserCrossReference_3_0; }

		//ID
		public RuleCall getUsersUserIDTerminalRuleCall_3_0_1() { return cUsersUserIDTerminalRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeConflictResolutionTypesEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRolesRoleCrossReference_3_0 = (CrossReference)cRolesAssignment_3.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_3_0_1 = (RuleCall)cRolesRoleCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cImportsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImportsImportResourceParserRuleCall_5_0 = (RuleCall)cImportsAssignment_5.eContents().get(0);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Policy:
		//	"policy" name=ID type=ConflictResolutionTypes roles+=[Role]+ "{" imports+=ImportResource* rules+=Rule* "}";
		@Override public ParserRule getRule() { return rule; }

		//"policy" name=ID type=ConflictResolutionTypes roles+=[Role]+ "{" imports+=ImportResource* rules+=Rule* "}"
		public Group getGroup() { return cGroup; }

		//"policy"
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=ConflictResolutionTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ConflictResolutionTypes
		public RuleCall getTypeConflictResolutionTypesEnumRuleCall_2_0() { return cTypeConflictResolutionTypesEnumRuleCall_2_0; }

		//roles+=[Role]+
		public Assignment getRolesAssignment_3() { return cRolesAssignment_3; }

		//[Role]
		public CrossReference getRolesRoleCrossReference_3_0() { return cRolesRoleCrossReference_3_0; }

		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_3_0_1() { return cRolesRoleIDTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//imports+=ImportResource*
		public Assignment getImportsAssignment_5() { return cImportsAssignment_5; }

		//ImportResource
		public RuleCall getImportsImportResourceParserRuleCall_5_0() { return cImportsImportResourceParserRuleCall_5_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_0() { return cRulesRuleParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRuleTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cRightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightsRuleRightsEnumRuleCall_3_0 = (RuleCall)cRightsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cQueryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cPatternPatternCrossReference_6_0 = (CrossReference)cPatternAssignment_6.eContents().get(0);
		private final RuleCall cPatternPatternSTRINGTerminalRuleCall_6_0_1 = (RuleCall)cPatternPatternCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBindingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBindingsBindingParserRuleCall_8_0 = (RuleCall)cBindingsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Rule:
		//	"rule" name=ID type=RuleType rights=RuleRights "{" "query" pattern=[iql::Pattern|STRING] ";"? bindings+=Binding* "}";
		@Override public ParserRule getRule() { return rule; }

		//"rule" name=ID type=RuleType rights=RuleRights "{" "query" pattern=[iql::Pattern|STRING] ";"? bindings+=Binding* "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=RuleType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//RuleType
		public RuleCall getTypeRuleTypeEnumRuleCall_2_0() { return cTypeRuleTypeEnumRuleCall_2_0; }

		//rights=RuleRights
		public Assignment getRightsAssignment_3() { return cRightsAssignment_3; }

		//RuleRights
		public RuleCall getRightsRuleRightsEnumRuleCall_3_0() { return cRightsRuleRightsEnumRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"query"
		public Keyword getQueryKeyword_5() { return cQueryKeyword_5; }

		//pattern=[iql::Pattern|STRING]
		public Assignment getPatternAssignment_6() { return cPatternAssignment_6; }

		//[iql::Pattern|STRING]
		public CrossReference getPatternPatternCrossReference_6_0() { return cPatternPatternCrossReference_6_0; }

		//STRING
		public RuleCall getPatternPatternSTRINGTerminalRuleCall_6_0_1() { return cPatternPatternSTRINGTerminalRuleCall_6_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//bindings+=Binding*
		public Assignment getBindingsAssignment_8() { return cBindingsAssignment_8; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_8_0() { return cBindingsBindingParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParamVariableCrossReference_1_0 = (CrossReference)cParamAssignment_1.eContents().get(0);
		private final RuleCall cParamVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cParamVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBindParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Binding:
		//	"bind" param=[iql::Variable] "<>" value=Bind;
		@Override public ParserRule getRule() { return rule; }

		//"bind" param=[iql::Variable] "<>" value=Bind
		public Group getGroup() { return cGroup; }

		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//param=[iql::Variable]
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//[iql::Variable]
		public CrossReference getParamVariableCrossReference_1_0() { return cParamVariableCrossReference_1_0; }

		//ID
		public RuleCall getParamVariableIDTerminalRuleCall_1_0_1() { return cParamVariableIDTerminalRuleCall_1_0_1; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_2() { return cLessThanSignGreaterThanSignKeyword_2; }

		//value=Bind
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Bind
		public RuleCall getValueBindParserRuleCall_3_0() { return cValueBindParserRuleCall_3_0; }
	}

	public class BindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectBindParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueBindParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRoleBindParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Bind:
		//	ObjectBind | ValueBind | RoleBind;
		@Override public ParserRule getRule() { return rule; }

		//ObjectBind | ValueBind | RoleBind
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectBind
		public RuleCall getObjectBindParserRuleCall_0() { return cObjectBindParserRuleCall_0; }

		//ValueBind
		public RuleCall getValueBindParserRuleCall_1() { return cValueBindParserRuleCall_1; }

		//RoleBind
		public RuleCall getRoleBindParserRuleCall_2() { return cRoleBindParserRuleCall_2; }
	}

	public class RoleBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_1_0 = (CrossReference)cRoleAssignment_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_1_0_1 = (RuleCall)cRoleRoleCrossReference_1_0.eContents().get(1);
		
		//RoleBind:
		//	"r" role=[Role];
		@Override public ParserRule getRule() { return rule; }

		//"r" role=[Role]
		public Group getGroup() { return cGroup; }

		//"r"
		public Keyword getRKeyword_0() { return cRKeyword_0; }

		//role=[Role]
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//[Role]
		public CrossReference getRoleRoleCrossReference_1_0() { return cRoleRoleCrossReference_1_0; }

		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_1_0_1() { return cRoleRoleIDTerminalRuleCall_1_0_1; }
	}

	public class ValueBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ValueBind:
		//	"v" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"v" value=STRING
		public Group getGroup() { return cGroup; }

		//"v"
		public Keyword getVKeyword_0() { return cVKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ObjectBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjectEObjectCrossReference_1_0 = (CrossReference)cObjectAssignment_1.eContents().get(0);
		private final RuleCall cObjectEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cObjectEObjectCrossReference_1_0.eContents().get(1);
		
		//ObjectBind:
		//	"o" object=[ecore::EObject];
		@Override public ParserRule getRule() { return rule; }

		//"o" object=[ecore::EObject]
		public Group getGroup() { return cGroup; }

		//"o"
		public Keyword getOKeyword_0() { return cOKeyword_0; }

		//object=[ecore::EObject]
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }

		//[ecore::EObject]
		public CrossReference getObjectEObjectCrossReference_1_0() { return cObjectEObjectCrossReference_1_0; }

		//ID
		public RuleCall getObjectEObjectIDTerminalRuleCall_1_0_1() { return cObjectEObjectIDTerminalRuleCall_1_0_1; }
	}

	public class ImportResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportResource:
		//	"import" importURI=STRING ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"import" importURI=STRING ";"?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	public class RuleRightsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RuleRights");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cReadEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cReadRKeyword_0_0 = (Keyword)cReadEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWriteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWriteWKeyword_1_0 = (Keyword)cWriteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReadWriteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReadWriteRWKeyword_2_0 = (Keyword)cReadWriteEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RuleRights:
		//	Read="R" | Write="W" | ReadWrite="RW";
		public EnumRule getRule() { return rule; }

		//Read="R" | Write="W" | ReadWrite="RW"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Read="R"
		public EnumLiteralDeclaration getReadEnumLiteralDeclaration_0() { return cReadEnumLiteralDeclaration_0; }

		//"R"
		public Keyword getReadRKeyword_0_0() { return cReadRKeyword_0_0; }

		//Write="W"
		public EnumLiteralDeclaration getWriteEnumLiteralDeclaration_1() { return cWriteEnumLiteralDeclaration_1; }

		//"W"
		public Keyword getWriteWKeyword_1_0() { return cWriteWKeyword_1_0; }

		//ReadWrite="RW"
		public EnumLiteralDeclaration getReadWriteEnumLiteralDeclaration_2() { return cReadWriteEnumLiteralDeclaration_2; }

		//"RW"
		public Keyword getReadWriteRWKeyword_2_0() { return cReadWriteRWKeyword_2_0; }
	}

	public class RuleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RuleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDenyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDenyDenyKeyword_0_0 = (Keyword)cDenyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPermitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPermitPermitKeyword_1_0 = (Keyword)cPermitEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cObfuscateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cObfuscateObfuscateKeyword_2_0 = (Keyword)cObfuscateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RuleType:
		//	Deny="deny" | Permit="permit" | Obfuscate="obfuscate";
		public EnumRule getRule() { return rule; }

		//Deny="deny" | Permit="permit" | Obfuscate="obfuscate"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Deny="deny"
		public EnumLiteralDeclaration getDenyEnumLiteralDeclaration_0() { return cDenyEnumLiteralDeclaration_0; }

		//"deny"
		public Keyword getDenyDenyKeyword_0_0() { return cDenyDenyKeyword_0_0; }

		//Permit="permit"
		public EnumLiteralDeclaration getPermitEnumLiteralDeclaration_1() { return cPermitEnumLiteralDeclaration_1; }

		//"permit"
		public Keyword getPermitPermitKeyword_1_0() { return cPermitPermitKeyword_1_0; }

		//Obfuscate="obfuscate"
		public EnumLiteralDeclaration getObfuscateEnumLiteralDeclaration_2() { return cObfuscateEnumLiteralDeclaration_2; }

		//"obfuscate"
		public Keyword getObfuscateObfuscateKeyword_2_0() { return cObfuscateObfuscateKeyword_2_0; }
	}

	public class ConflictResolutionTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConflictResolutionTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDenyOverridesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDenyOverridesDenyOverridesKeyword_0_0 = (Keyword)cDenyOverridesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPermitOverridesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPermitOverridesPermitOverridesKeyword_1_0 = (Keyword)cPermitOverridesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFirstApplicableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFirstApplicableFirstApplicableKeyword_2_0 = (Keyword)cFirstApplicableEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOnlyOneApplicablePolicyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOnlyOneApplicablePolicyOnlyOneApplicablePolicyKeyword_3_0 = (Keyword)cOnlyOneApplicablePolicyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedDenyOverridesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOrderedDenyOverridesOrderedDenyOverridesKeyword_4_0 = (Keyword)cOrderedDenyOverridesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedPermitOverridesEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOrderedPermitOverridesOrderedPermitOverridesKeyword_5_0 = (Keyword)cOrderedPermitOverridesEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDenyUnlessPermitEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDenyUnlessPermitDenyUnlessPermitKeyword_6_0 = (Keyword)cDenyUnlessPermitEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPermitUnlessDenyEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPermitUnlessDenyPermitUnlessPermitKeyword_7_0 = (Keyword)cPermitUnlessDenyEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ConflictResolutionTypes:
		//	DenyOverrides="deny-overrides" | PermitOverrides="permit-overrides" | FirstApplicable="first-applicable" |
		//	OnlyOneApplicablePolicy="only-one-applicable-policy" | OrderedDenyOverrides="ordered-deny-overrides" |
		//	OrderedPermitOverrides="ordered-permit-overrides" | DenyUnlessPermit="deny-unless-permit" |
		//	PermitUnlessDeny="permit-unless-permit";
		public EnumRule getRule() { return rule; }

		//DenyOverrides="deny-overrides" | PermitOverrides="permit-overrides" | FirstApplicable="first-applicable" |
		//OnlyOneApplicablePolicy="only-one-applicable-policy" | OrderedDenyOverrides="ordered-deny-overrides" |
		//OrderedPermitOverrides="ordered-permit-overrides" | DenyUnlessPermit="deny-unless-permit" |
		//PermitUnlessDeny="permit-unless-permit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DenyOverrides="deny-overrides"
		public EnumLiteralDeclaration getDenyOverridesEnumLiteralDeclaration_0() { return cDenyOverridesEnumLiteralDeclaration_0; }

		//"deny-overrides"
		public Keyword getDenyOverridesDenyOverridesKeyword_0_0() { return cDenyOverridesDenyOverridesKeyword_0_0; }

		//PermitOverrides="permit-overrides"
		public EnumLiteralDeclaration getPermitOverridesEnumLiteralDeclaration_1() { return cPermitOverridesEnumLiteralDeclaration_1; }

		//"permit-overrides"
		public Keyword getPermitOverridesPermitOverridesKeyword_1_0() { return cPermitOverridesPermitOverridesKeyword_1_0; }

		//FirstApplicable="first-applicable"
		public EnumLiteralDeclaration getFirstApplicableEnumLiteralDeclaration_2() { return cFirstApplicableEnumLiteralDeclaration_2; }

		//"first-applicable"
		public Keyword getFirstApplicableFirstApplicableKeyword_2_0() { return cFirstApplicableFirstApplicableKeyword_2_0; }

		//OnlyOneApplicablePolicy="only-one-applicable-policy"
		public EnumLiteralDeclaration getOnlyOneApplicablePolicyEnumLiteralDeclaration_3() { return cOnlyOneApplicablePolicyEnumLiteralDeclaration_3; }

		//"only-one-applicable-policy"
		public Keyword getOnlyOneApplicablePolicyOnlyOneApplicablePolicyKeyword_3_0() { return cOnlyOneApplicablePolicyOnlyOneApplicablePolicyKeyword_3_0; }

		//OrderedDenyOverrides="ordered-deny-overrides"
		public EnumLiteralDeclaration getOrderedDenyOverridesEnumLiteralDeclaration_4() { return cOrderedDenyOverridesEnumLiteralDeclaration_4; }

		//"ordered-deny-overrides"
		public Keyword getOrderedDenyOverridesOrderedDenyOverridesKeyword_4_0() { return cOrderedDenyOverridesOrderedDenyOverridesKeyword_4_0; }

		//OrderedPermitOverrides="ordered-permit-overrides"
		public EnumLiteralDeclaration getOrderedPermitOverridesEnumLiteralDeclaration_5() { return cOrderedPermitOverridesEnumLiteralDeclaration_5; }

		//"ordered-permit-overrides"
		public Keyword getOrderedPermitOverridesOrderedPermitOverridesKeyword_5_0() { return cOrderedPermitOverridesOrderedPermitOverridesKeyword_5_0; }

		//DenyUnlessPermit="deny-unless-permit"
		public EnumLiteralDeclaration getDenyUnlessPermitEnumLiteralDeclaration_6() { return cDenyUnlessPermitEnumLiteralDeclaration_6; }

		//"deny-unless-permit"
		public Keyword getDenyUnlessPermitDenyUnlessPermitKeyword_6_0() { return cDenyUnlessPermitDenyUnlessPermitKeyword_6_0; }

		//PermitUnlessDeny="permit-unless-permit"
		public EnumLiteralDeclaration getPermitUnlessDenyEnumLiteralDeclaration_7() { return cPermitUnlessDenyEnumLiteralDeclaration_7; }

		//"permit-unless-permit"
		public Keyword getPermitUnlessDenyPermitUnlessPermitKeyword_7_0() { return cPermitUnlessDenyPermitUnlessPermitKeyword_7_0; }
	}
	
	private final AccessControlModelElements pAccessControlModel;
	private final RoleElements pRole;
	private final UserElements pUser;
	private final GroupElements pGroup;
	private final PolicyElements pPolicy;
	private final RuleElements pRule;
	private final BindingElements pBinding;
	private final BindElements pBind;
	private final RoleBindElements pRoleBind;
	private final ValueBindElements pValueBind;
	private final ObjectBindElements pObjectBind;
	private final ImportResourceElements pImportResource;
	private final RuleRightsElements unknownRuleRuleRights;
	private final RuleTypeElements unknownRuleRuleType;
	private final ConflictResolutionTypesElements unknownRuleConflictResolutionTypes;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SecurityAccessGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAccessControlModel = new AccessControlModelElements();
		this.pRole = new RoleElements();
		this.pUser = new UserElements();
		this.pGroup = new GroupElements();
		this.pPolicy = new PolicyElements();
		this.pRule = new RuleElements();
		this.pBinding = new BindingElements();
		this.pBind = new BindElements();
		this.pRoleBind = new RoleBindElements();
		this.pValueBind = new ValueBindElements();
		this.pObjectBind = new ObjectBindElements();
		this.pImportResource = new ImportResourceElements();
		this.unknownRuleRuleRights = new RuleRightsElements();
		this.unknownRuleRuleType = new RuleTypeElements();
		this.unknownRuleConflictResolutionTypes = new ConflictResolutionTypesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mondo.collab.security.xtext.SecurityAccess".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AccessControlModel:
	//	roles+=Role* policy=Policy;
	public AccessControlModelElements getAccessControlModelAccess() {
		return pAccessControlModel;
	}
	
	public ParserRule getAccessControlModelRule() {
		return getAccessControlModelAccess().getRule();
	}

	//Role:
	//	User | Group;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//User:
	//	"user" name=ID;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}

	//Group:
	//	"group" name=ID "{" users+=[User]* "}";
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Policy:
	//	"policy" name=ID type=ConflictResolutionTypes roles+=[Role]+ "{" imports+=ImportResource* rules+=Rule* "}";
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}

	//Rule:
	//	"rule" name=ID type=RuleType rights=RuleRights "{" "query" pattern=[iql::Pattern|STRING] ";"? bindings+=Binding* "}";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Binding:
	//	"bind" param=[iql::Variable] "<>" value=Bind;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Bind:
	//	ObjectBind | ValueBind | RoleBind;
	public BindElements getBindAccess() {
		return pBind;
	}
	
	public ParserRule getBindRule() {
		return getBindAccess().getRule();
	}

	//RoleBind:
	//	"r" role=[Role];
	public RoleBindElements getRoleBindAccess() {
		return pRoleBind;
	}
	
	public ParserRule getRoleBindRule() {
		return getRoleBindAccess().getRule();
	}

	//ValueBind:
	//	"v" value=STRING;
	public ValueBindElements getValueBindAccess() {
		return pValueBind;
	}
	
	public ParserRule getValueBindRule() {
		return getValueBindAccess().getRule();
	}

	//ObjectBind:
	//	"o" object=[ecore::EObject];
	public ObjectBindElements getObjectBindAccess() {
		return pObjectBind;
	}
	
	public ParserRule getObjectBindRule() {
		return getObjectBindAccess().getRule();
	}

	//ImportResource:
	//	"import" importURI=STRING ";"?;
	public ImportResourceElements getImportResourceAccess() {
		return pImportResource;
	}
	
	public ParserRule getImportResourceRule() {
		return getImportResourceAccess().getRule();
	}

	//enum RuleRights:
	//	Read="R" | Write="W" | ReadWrite="RW";
	public RuleRightsElements getRuleRightsAccess() {
		return unknownRuleRuleRights;
	}
	
	public EnumRule getRuleRightsRule() {
		return getRuleRightsAccess().getRule();
	}

	//enum RuleType:
	//	Deny="deny" | Permit="permit" | Obfuscate="obfuscate";
	public RuleTypeElements getRuleTypeAccess() {
		return unknownRuleRuleType;
	}
	
	public EnumRule getRuleTypeRule() {
		return getRuleTypeAccess().getRule();
	}

	//enum ConflictResolutionTypes:
	//	DenyOverrides="deny-overrides" | PermitOverrides="permit-overrides" | FirstApplicable="first-applicable" |
	//	OnlyOneApplicablePolicy="only-one-applicable-policy" | OrderedDenyOverrides="ordered-deny-overrides" |
	//	OrderedPermitOverrides="ordered-permit-overrides" | DenyUnlessPermit="deny-unless-permit" |
	//	PermitUnlessDeny="permit-unless-permit";
	public ConflictResolutionTypesElements getConflictResolutionTypesAccess() {
		return unknownRuleConflictResolutionTypes;
	}
	
	public EnumRule getConflictResolutionTypesRule() {
		return getConflictResolutionTypesAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
