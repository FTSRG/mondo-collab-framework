/*
 * generated by Xtext
 */
package org.mondo.collaboration.security.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mondo.collaboration.security.xtext.services.SecurityAccessGrammarAccess;

public class SecurityAccessParser extends AbstractContentAssistParser {
	
	@Inject
	private SecurityAccessGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mondo.collaboration.security.xtext.ui.contentassist.antlr.internal.InternalSecurityAccessParser createParser() {
		org.mondo.collaboration.security.xtext.ui.contentassist.antlr.internal.InternalSecurityAccessParser result = new org.mondo.collaboration.security.xtext.ui.contentassist.antlr.internal.InternalSecurityAccessParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
					put(grammarAccess.getBindAccess().getAlternatives(), "rule__Bind__Alternatives");
					put(grammarAccess.getRuleRightsAccess().getAlternatives(), "rule__RuleRights__Alternatives");
					put(grammarAccess.getRuleTypeAccess().getAlternatives(), "rule__RuleType__Alternatives");
					put(grammarAccess.getConflictResolutionTypesAccess().getAlternatives(), "rule__ConflictResolutionTypes__Alternatives");
					put(grammarAccess.getAccessControlModelAccess().getGroup(), "rule__AccessControlModel__Group__0");
					put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
					put(grammarAccess.getRoleBindAccess().getGroup(), "rule__RoleBind__Group__0");
					put(grammarAccess.getValueBindAccess().getGroup(), "rule__ValueBind__Group__0");
					put(grammarAccess.getObjectBindAccess().getGroup(), "rule__ObjectBind__Group__0");
					put(grammarAccess.getImportResourceAccess().getGroup(), "rule__ImportResource__Group__0");
					put(grammarAccess.getAccessControlModelAccess().getRolesAssignment_0(), "rule__AccessControlModel__RolesAssignment_0");
					put(grammarAccess.getAccessControlModelAccess().getPolicyAssignment_1(), "rule__AccessControlModel__PolicyAssignment_1");
					put(grammarAccess.getUserAccess().getNameAssignment_1(), "rule__User__NameAssignment_1");
					put(grammarAccess.getGroupAccess().getNameAssignment_1(), "rule__Group__NameAssignment_1");
					put(grammarAccess.getGroupAccess().getUsersAssignment_3(), "rule__Group__UsersAssignment_3");
					put(grammarAccess.getPolicyAccess().getNameAssignment_1(), "rule__Policy__NameAssignment_1");
					put(grammarAccess.getPolicyAccess().getTypeAssignment_2(), "rule__Policy__TypeAssignment_2");
					put(grammarAccess.getPolicyAccess().getRolesAssignment_3(), "rule__Policy__RolesAssignment_3");
					put(grammarAccess.getPolicyAccess().getImportsAssignment_5(), "rule__Policy__ImportsAssignment_5");
					put(grammarAccess.getPolicyAccess().getRulesAssignment_6(), "rule__Policy__RulesAssignment_6");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getTypeAssignment_2(), "rule__Rule__TypeAssignment_2");
					put(grammarAccess.getRuleAccess().getRightsAssignment_3(), "rule__Rule__RightsAssignment_3");
					put(grammarAccess.getRuleAccess().getPatternAssignment_6(), "rule__Rule__PatternAssignment_6");
					put(grammarAccess.getRuleAccess().getBindingsAssignment_8(), "rule__Rule__BindingsAssignment_8");
					put(grammarAccess.getBindingAccess().getParamAssignment_1(), "rule__Binding__ParamAssignment_1");
					put(grammarAccess.getBindingAccess().getValueAssignment_2(), "rule__Binding__ValueAssignment_2");
					put(grammarAccess.getRoleBindAccess().getRoleAssignment_1(), "rule__RoleBind__RoleAssignment_1");
					put(grammarAccess.getValueBindAccess().getValueAssignment_1(), "rule__ValueBind__ValueAssignment_1");
					put(grammarAccess.getObjectBindAccess().getObjectAssignment_1(), "rule__ObjectBind__ObjectAssignment_1");
					put(grammarAccess.getImportResourceAccess().getImportURIAssignment_1(), "rule__ImportResource__ImportURIAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mondo.collaboration.security.xtext.ui.contentassist.antlr.internal.InternalSecurityAccessParser typedParser = (org.mondo.collaboration.security.xtext.ui.contentassist.antlr.internal.InternalSecurityAccessParser) parser;
			typedParser.entryRuleAccessControlModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SecurityAccessGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SecurityAccessGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
