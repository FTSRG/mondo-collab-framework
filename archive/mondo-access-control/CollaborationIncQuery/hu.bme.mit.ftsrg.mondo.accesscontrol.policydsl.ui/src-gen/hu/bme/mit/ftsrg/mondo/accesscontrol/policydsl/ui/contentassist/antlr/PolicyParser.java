/*
* generated by Xtext
*/
package hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.services.PolicyGrammarAccess;

public class PolicyParser extends AbstractContentAssistParser {
	
	@Inject
	private PolicyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr.internal.InternalPolicyParser createParser() {
		hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr.internal.InternalPolicyParser result = new hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr.internal.InternalPolicyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementsAccess().getAlternatives(), "rule__Elements__Alternatives");
					put(grammarAccess.getPermissionTypeAccess().getAlternatives(), "rule__PermissionType__Alternatives");
					put(grammarAccess.getTargetTypeAccess().getAlternatives(), "rule__TargetType__Alternatives");
					put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
					put(grammarAccess.getPolicyAccess().getGroup_2(), "rule__Policy__Group_2__0");
					put(grammarAccess.getPolicyAccess().getGroup_2_1_0(), "rule__Policy__Group_2_1_0__0");
					put(grammarAccess.getPolicyAccess().getGroup_2_1_1(), "rule__Policy__Group_2_1_1__0");
					put(grammarAccess.getPolicyAccess().getGroup_2_1_2(), "rule__Policy__Group_2_1_2__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup_1(), "rule__Association__Group_1__0");
					put(grammarAccess.getAssociationAccess().getGroup_1_2_0(), "rule__Association__Group_1_2_0__0");
					put(grammarAccess.getAssociationAccess().getGroup_1_2_1(), "rule__Association__Group_1_2_1__0");
					put(grammarAccess.getAssociationAccess().getGroup_1_2_2(), "rule__Association__Group_1_2_2__0");
					put(grammarAccess.getAssociationAccess().getGroup_1_2_3(), "rule__Association__Group_1_2_3__0");
					put(grammarAccess.getAssociationAccess().getGroup_1_2_3_2(), "rule__Association__Group_1_2_3_2__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getPolicyAccess().getNameAssignment_1(), "rule__Policy__NameAssignment_1");
					put(grammarAccess.getPolicyAccess().getPermissionAssignment_2_1_0_1(), "rule__Policy__PermissionAssignment_2_1_0_1");
					put(grammarAccess.getPolicyAccess().getQueryAssignment_2_1_1_1(), "rule__Policy__QueryAssignment_2_1_1_1");
					put(grammarAccess.getPolicyAccess().getPatternAssignment_2_1_2_1(), "rule__Policy__PatternAssignment_2_1_2_1");
					put(grammarAccess.getAssociationAccess().getTesztAssignment_1_1(), "rule__Association__TesztAssignment_1_1");
					put(grammarAccess.getAssociationAccess().getDefaultPermissionAssignment_1_2_0_1(), "rule__Association__DefaultPermissionAssignment_1_2_0_1");
					put(grammarAccess.getAssociationAccess().getOverrideAssignment_1_2_1_1(), "rule__Association__OverrideAssignment_1_2_1_1");
					put(grammarAccess.getAssociationAccess().getTargetAssignment_1_2_2_1(), "rule__Association__TargetAssignment_1_2_2_1");
					put(grammarAccess.getAssociationAccess().getTarget_idAssignment_1_2_2_3(), "rule__Association__Target_idAssignment_1_2_2_3");
					put(grammarAccess.getAssociationAccess().getPoliciesAssignment_1_2_3_1(), "rule__Association__PoliciesAssignment_1_2_3_1");
					put(grammarAccess.getAssociationAccess().getPoliciesAssignment_1_2_3_2_1(), "rule__Association__PoliciesAssignment_1_2_3_2_1");
					put(grammarAccess.getPolicyAccess().getUnorderedGroup_2_1(), "rule__Policy__UnorderedGroup_2_1");
					put(grammarAccess.getAssociationAccess().getUnorderedGroup_1_2(), "rule__Association__UnorderedGroup_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr.internal.InternalPolicyParser typedParser = (hu.bme.mit.ftsrg.mondo.accesscontrol.policydsl.ui.contentassist.antlr.internal.InternalPolicyParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PolicyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PolicyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
