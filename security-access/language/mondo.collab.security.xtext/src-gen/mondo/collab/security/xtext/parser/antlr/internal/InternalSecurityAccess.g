/*
 * generated by Xtext
 */
grammar InternalSecurityAccess;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package mondo.collab.security.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mondo.collab.security.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mondo.collab.security.xtext.services.SecurityAccessGrammarAccess;

}

@parser::members {

 	private SecurityAccessGrammarAccess grammarAccess;
 	
    public InternalSecurityAccessParser(TokenStream input, SecurityAccessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AccessControlModel";	
   	}
   	
   	@Override
   	protected SecurityAccessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAccessControlModel
entryRuleAccessControlModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessControlModelRule()); }
	 iv_ruleAccessControlModel=ruleAccessControlModel 
	 { $current=$iv_ruleAccessControlModel.current; } 
	 EOF 
;

// Rule AccessControlModel
ruleAccessControlModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAccessControlModelAccess().getRolesRoleParserRuleCall_0_0()); 
	    }
		lv_roles_0_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessControlModelRule());
	        }
       		add(
       			$current, 
       			"roles",
        		lv_roles_0_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessControlModelAccess().getPolicyPolicyParserRuleCall_1_0()); 
	    }
		lv_policy_1_0=rulePolicy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessControlModelRule());
	        }
       		set(
       			$current, 
       			"policy",
        		lv_policy_1_0, 
        		"Policy");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRoleAccess().getUserParserRuleCall_0()); 
    }
    this_User_0=ruleUser
    { 
        $current = $this_User_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRoleAccess().getGroupParserRuleCall_1()); 
    }
    this_Group_1=ruleGroup
    { 
        $current = $this_Group_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUser
entryRuleUser returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserRule()); }
	 iv_ruleUser=ruleUser 
	 { $current=$iv_ruleUser.current; } 
	 EOF 
;

// Rule User
ruleUser returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='user' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUserAccess().getUserKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUserAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='group' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupAccess().getGroupKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGroupAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getGroupAccess().getUsersUserCrossReference_3_0()); 
	}

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	 iv_rulePolicy=rulePolicy 
	 { $current=$iv_rulePolicy.current; } 
	 EOF 
;

// Rule Policy
rulePolicy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='policy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPolicyAccess().getPolicyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPolicyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicyAccess().getTypeConflictResolutionTypesEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleConflictResolutionTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ConflictResolutionTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPolicyRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPolicyAccess().getRolesRoleCrossReference_3_0()); 
	}

)
)+	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicyAccess().getImportsImportResourceParserRuleCall_5_0()); 
	    }
		lv_imports_5_0=ruleImportResource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicyRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_5_0, 
        		"ImportResource");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicyAccess().getRulesRuleParserRuleCall_6_0()); 
	    }
		lv_rules_6_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicyRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_6_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getTypeRuleTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleRuleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"RuleType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getRightsRuleRightsEnumRuleCall_3_0()); 
	    }
		lv_rights_3_0=ruleRuleRights		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"rights",
        		lv_rights_3_0, 
        		"RuleRights");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_5='query' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getQueryKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
        }
	otherlv_6=RULE_STRING
	{
		newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getPatternPatternCrossReference_6_0()); 
	}

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getSemicolonKeyword_7());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getBindingsBindingParserRuleCall_8_0()); 
	    }
		lv_bindings_8_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_8_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	 iv_ruleBinding=ruleBinding 
	 { $current=$iv_ruleBinding.current; } 
	 EOF 
;

// Rule Binding
ruleBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bind' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBindingAccess().getBindKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBindingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getParamVariableCrossReference_1_0()); 
	}

)
)	otherlv_2='<>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBindingAccess().getLessThanSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBindingAccess().getValueBindParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Bind");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBind
entryRuleBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindRule()); }
	 iv_ruleBind=ruleBind 
	 { $current=$iv_ruleBind.current; } 
	 EOF 
;

// Rule Bind
ruleBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBindAccess().getObjectBindParserRuleCall_0()); 
    }
    this_ObjectBind_0=ruleObjectBind
    { 
        $current = $this_ObjectBind_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBindAccess().getValueBindParserRuleCall_1()); 
    }
    this_ValueBind_1=ruleValueBind
    { 
        $current = $this_ValueBind_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBindAccess().getRoleBindParserRuleCall_2()); 
    }
    this_RoleBind_2=ruleRoleBind
    { 
        $current = $this_RoleBind_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRoleBind
entryRuleRoleBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleBindRule()); }
	 iv_ruleRoleBind=ruleRoleBind 
	 { $current=$iv_ruleRoleBind.current; } 
	 EOF 
;

// Rule RoleBind
ruleRoleBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='r' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRoleBindAccess().getRKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleBindRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRoleBindAccess().getRoleRoleCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleValueBind
entryRuleValueBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueBindRule()); }
	 iv_ruleValueBind=ruleValueBind 
	 { $current=$iv_ruleValueBind.current; } 
	 EOF 
;

// Rule ValueBind
ruleValueBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='v' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueBindAccess().getVKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getValueBindAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueBindRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleObjectBind
entryRuleObjectBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectBindRule()); }
	 iv_ruleObjectBind=ruleObjectBind 
	 { $current=$iv_ruleObjectBind.current; } 
	 EOF 
;

// Rule ObjectBind
ruleObjectBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='o' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectBindAccess().getOKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectBindRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getObjectBindAccess().getObjectEObjectCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleImportResource
entryRuleImportResource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportResourceRule()); }
	 iv_ruleImportResource=ruleImportResource 
	 { $current=$iv_ruleImportResource.current; } 
	 EOF 
;

// Rule ImportResource
ruleImportResource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportResourceAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportResourceAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportResourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportResourceAccess().getSemicolonKeyword_2());
    }
)?)
;





// Rule RuleRights
ruleRuleRights returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='R' 
	{
        $current = grammarAccess.getRuleRightsAccess().getReadEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRuleRightsAccess().getReadEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='W' 
	{
        $current = grammarAccess.getRuleRightsAccess().getWriteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRuleRightsAccess().getWriteEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='RW' 
	{
        $current = grammarAccess.getRuleRightsAccess().getReadWriteEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRuleRightsAccess().getReadWriteEnumLiteralDeclaration_2()); 
    }
));



// Rule RuleType
ruleRuleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='deny' 
	{
        $current = grammarAccess.getRuleTypeAccess().getDenyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRuleTypeAccess().getDenyEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='permit' 
	{
        $current = grammarAccess.getRuleTypeAccess().getPermitEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRuleTypeAccess().getPermitEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='obfuscate' 
	{
        $current = grammarAccess.getRuleTypeAccess().getObfuscateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRuleTypeAccess().getObfuscateEnumLiteralDeclaration_2()); 
    }
));



// Rule ConflictResolutionTypes
ruleConflictResolutionTypes returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='deny-overrides' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getDenyOverridesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConflictResolutionTypesAccess().getDenyOverridesEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='permit-overrides' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getPermitOverridesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConflictResolutionTypesAccess().getPermitOverridesEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='first-applicable' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getFirstApplicableEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConflictResolutionTypesAccess().getFirstApplicableEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='only-one-applicable-policy' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getOnlyOneApplicablePolicyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getConflictResolutionTypesAccess().getOnlyOneApplicablePolicyEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='ordered-deny-overrides' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getOrderedDenyOverridesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getConflictResolutionTypesAccess().getOrderedDenyOverridesEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='ordered-permit-overrides' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getOrderedPermitOverridesEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getConflictResolutionTypesAccess().getOrderedPermitOverridesEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='deny-unless-permit' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getDenyUnlessPermitEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getConflictResolutionTypesAccess().getDenyUnlessPermitEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='permit-unless-permit' 
	{
        $current = grammarAccess.getConflictResolutionTypesAccess().getPermitUnlessDenyEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getConflictResolutionTypesAccess().getPermitUnlessDenyEnumLiteralDeclaration_7()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


